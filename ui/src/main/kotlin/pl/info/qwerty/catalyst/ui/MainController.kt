package pl.info.qwerty.catalyst.ui

import javafx.collections.FXCollections
import javafx.fxml.FXML
import javafx.fxml.Initializable
import javafx.scene.control.ListCell
import javafx.scene.control.ListView
import pl.info.qwerty.catalyst.model.Bond
import java.net.URL
import java.util.*

class MainController(
        bondList: ListView<Bond>,
        bondProperties: BondProperties
) {
    private val bonds = FXCollections.observableArrayList<Bond>()

    init {
        val fetchedBonds = BackendService.service.bonds(1).execute().body() ?: throw Exception("Unable to fetch bonds")
        bonds.addAll(fetchedBonds)
        bondList.items = bonds

        bondList.setCellFactory {
            object : ListCell<Bond>() {
                override fun updateItem(item: Bond?, empty: Boolean) {
                    super.updateItem(item, empty)
                    if (item != null) {
                        text = "${item.name} ${item.segment}"
                    }
                }
            }
        }

        bondList.selectionModel.selectedItemProperty().addListener({ arg0, arg1, arg2 ->
            if (arg2 != null) {
                bondProperties.use(arg2)
            } else {
                bondProperties.clean()
            }
        })
    }

//        se.getUpdateMarketsInfo().setOnRunning(t -> {
//            updateProgressLabel.setVisible(true);
//            updateProgressLabel.textProperty().bind(
//                    se.getUpdateMarketsInfo().messageProperty());
//            mainPanel.setDisable(true);
//            mainPanel.setEffect(new GaussianBlur(10));
//        });
//        se.getUpdateMarketsInfo().setOnSucceeded(t -> {
//            updateProgressLabel.setVisible(false);
//            mainPanel.setDisable(false);
//            mainPanel.setEffect(null);
//        });
//        minimalProvisionField.textProperty().bindBidirectional(se.minimalProvisionProperty(), new SimpleDoubleConverter());
//        percentageProvisionField.textProperty().bindBidirectional(se.percentageProvisionProperty(), new SimpleDoubleConverter());
//        setSiteMarket();
//        bondList.items = FXCollections.observableList(bonds.toMutableList())

//        bondList.selectionModel.selectedItemProperty().addListener({ arg0, arg1, arg2 ->
//            if (arg2 != null) {
//                if (bondDetails.isDisable) {
//                    bondDetails.isDisable = false
//                    x1.isExpanded = true
//                }
//                if (arg1 != null) {
//                    okresOdsetkowySlider.valueProperty().unbindBidirectional(arg1.interestPeriodProperty())
//                    simplePriceSlider.valueProperty().unbindBidirectional(arg1.simplePriceProperty())
//                    numberOfBoundsSlider.valueProperty().unbindBidirectional(arg1.numberOfBondsProperty())
//                }

//                dataEmisjiLabel.textProperty().bind(SimpleStringProperty(arg2.additionalInfo.beginDate))
//                dataWykupuLabel.textProperty().bind(SimpleStringProperty(arg2.additionalInfo.endDate))
//                emitentLabel.textProperty().bind(SimpleStringProperty(arg2.issuer))
//                marketNameLabel.textProperty().bind(SimpleStringProperty(arg2.marketName))
//                jednostkaTransakcyjnaLabel.textProperty().bind(SimpleIntegerProperty(arg2.transactionUnit).asString())
//                oprocentowanieBieżąceLabel.textProperty().bind(SimpleDoubleProperty(arg2.additionalInfo.currentInterestRate).asString("%.2f%%"))
//                rodzajOprocentowaniaLabel.textProperty().bind(SimpleStringProperty(arg2.additionalInfo.interestType))
//                segmentLabel.textProperty().bind(SimpleStringProperty(arg2.segment))
//                skumulowaneOdsetkiLabel.textProperty().bind(SimpleDoubleProperty(arg2.additionalInfo.cumulativeInterest).asString("%.2f zł"))
//                wartośćEmisjiLabel.textProperty().bind(SimpleDoubleProperty(arg2.additionalInfo.issueValue).asString("%.0f zł"))
//                wartośćNominalnaLabel.textProperty().bind(SimpleDoubleProperty(arg2.additionalInfo.faceValue).asString("%.0f zł"))
//                okresOdsetkowySlider.valueProperty().bindBidirectional(arg2.interestPeriodProperty())
//                okresOdsetkowyLabel.textProperty().bind(arg2.interestPeriodProperty().asString())
//                okresOdsetkowyAutoLabel.textProperty().bind(arg2.autoGeneratedPeriodProperty().asString())
//                wielkośćKuponuLabel.textProperty().bind(arg2.couponValueProperty().asString("%.2f zł"))
//                datyZapadania.setItems(arg2.entitledToInterestDaysProperty())
//                datyWypłaty.setItems(arg2.payoutDaysProperty())
//                datyZapadania.getSelectionModel().select(arg2.getNextEntitledToInterestDay())
//                datyWypłaty.getSelectionModel().select(arg2.getNextPayoutDay())
//                remainingPeriodsLabel.textProperty().bind(arg2.remainingPeriodsProperty().asString())
//                simplePriceSlider.valueProperty().bindBidirectional(arg2.simplePriceProperty())
//                simplePriceLabel.textProperty().bind(simplePriceSlider.valueProperty().asString("%.2f %%"))
//                dirtyPriceLabel.textProperty().bind(arg2.dirtyPriceProperty().asString("%.2f zł"))
//                numberOfBoundsSlider.valueProperty().bindBidirectional(arg2.numberOfBondsProperty())
//                numberOfBoundsLabel.textProperty().bind(numberOfBoundsSlider.valueProperty().asString("%.0f"))
//                priceForBondsLabel.textProperty().bind(arg2.priceForBondsProperty().asString("%.2f zł"))
//                priceForBondsProvisionLabel.textProperty().bind(arg2.priceForBondsProvisionProperty().asString("%.2f zł"))
//                finalPriceLabel.textProperty().bind(arg2.finalPriceProperty().asString("%.2f zł"))
//                finalTaxLabel.textProperty().bind(arg2.finalTaxProperty().asString("%.2f zł"))
//                finalPriceTaxLabel.textProperty().bind(arg2.finalPriceAfterTaxProperty().asString("%.2f zł"))
//                finalPercentLabel.textProperty().bind(arg2.finalPercentProperty().asString("%.2f%%"))

//
//                val lt = arg2.lastTransaction
//                if (lt != null) {
//                    lastTransactionLabel.text = lt.lastTransaction
//                    lastTransactionVolumeLabel.text = lt.lastTransactionVolume.toString()
//                }
//                val bt = arg2.buyTriple
//                if (bt != null) {
//                    numberOfOrdersBuyLabel.text = bt.ordersCount.toString()
//                    buyVolumeLabel.text = bt.volume.toString()
//                    buyPriceLimitLabel.text = String.format("%.2f zł", bt.price)
//                }
//                val st = arg2.sellTriple
//                if (st != null) {
//                    numberOfOrdersSellLabel.text = st.ordersCount.toString()
//                    sellVolumeLabel.text = st.volume.toString()
//                    sellPriceLimitLabel.text = String.format("%.2f zł", st.price)
//                }
//
////                dayVolumeLabel.textProperty().bind(arg2.dayVolumeProperty().asString())
////                dayValueLabel.textProperty().bind(arg2.dayValueProperty().asString("%.2f zł"))
//
//                referencePriceLabel.text = String.format("%.2f zł", arg2.referencePrice)

    /* TODO */
//                openingPriceLabel.text = arg2.openingPriceProperty().asString("%.2f zł"))
//                minimalPriceLabel.textProperty().bind(arg2.minimalPriceProperty().asString("%.2f zł"))
//                maximalPriceLabel.textProperty().bind(arg2.maximalPriceProperty().asString("%.2f zł"))
//                lastPriceLabel.textProperty().bind(arg2.lastPriceProperty().asString("%.2f zł"))
//                changeLabel.textProperty().bind(arg2.changeProperty().asString("%.2f%%"))
    /* END TODO */


//                arg2.entitledToInterestDaysProperty().addListener((ListChangeListener<LocalDateTime>) change -> datyZapadania.getSelectionModel().select(arg2.getNextEntitledToInterestDay()));
//                arg2.payoutDaysProperty().addListener((ListChangeListener<LocalDateTime>) change -> datyWypłaty.getSelectionModel().select(arg2.getNextPayoutDay()));
//            }
//        })
//        se.getUpdateMarketsInfo().start();
}

class FXMLMainController : Initializable {

    @FXML
    private var bondInfoController: FXMLBondController? = null

    @FXML
    private var bondList: ListView<Bond>? = null

    override fun initialize(location: URL?, resources: ResourceBundle?) {
        val bic = bondInfoController ?: throw Exception()
        val bondProperties = BondProperties()
        bic.init(bondProperties)
        MainController(bondList!!, bondProperties)
    }

}